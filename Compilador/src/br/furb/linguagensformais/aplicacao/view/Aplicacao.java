/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.furb.linguagensformais.aplicacao.view;

import br.furb.linguagensformais.aplicacao.Automato;
import br.furb.linguagensformais.aplicacao.Palavra;
import java.awt.Dimension;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.*;

/**
 *
 * @author Flávio e Carol
 */
public class Aplicacao extends javax.swing.JFrame {
    private List<Palavra> lstPalavra;
    private DefaultTableModel tableModel;
    private String[] limparTableModel;
    private Automato automato;
    
    /**
     * Creates new form Aplicacao
     */
    public Aplicacao() {
        initComponents();
        this.formatarTela();
        this.inicializarCampos();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        fundoJP = new javax.swing.JPanel();
        textAreaJP = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        JTA_CampoA = new javax.swing.JTextArea();
        botoesJP = new javax.swing.JPanel();
        JB_Analisar = new javax.swing.JButton();
        JB_Limpar = new javax.swing.JButton();
        JB_Equipe = new javax.swing.JButton();
        JSP_CampoB = new javax.swing.JScrollPane();
        JT_CampoB = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("reconhecedor de linguagem regular");
        setPreferredSize(new java.awt.Dimension(864, 410));
        setSize(new java.awt.Dimension(864, 410));
        getContentPane().setLayout(new java.awt.GridLayout());

        fundoJP.setMinimumSize(new java.awt.Dimension(864, 410));
        fundoJP.setPreferredSize(new java.awt.Dimension(864, 410));
        java.awt.GridBagLayout fundoJPLayout = new java.awt.GridBagLayout();
        fundoJPLayout.columnWidths = new int[] {0};
        fundoJPLayout.rowHeights = new int[] {0, 5, 0, 5, 0};
        fundoJP.setLayout(fundoJPLayout);

        textAreaJP.setPreferredSize(new java.awt.Dimension(864, 187));
        textAreaJP.setLayout(new java.awt.GridLayout());

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setPreferredSize(new java.awt.Dimension(860, 183));

        JTA_CampoA.setColumns(20);
        JTA_CampoA.setRows(5);
        JTA_CampoA.setMaximumSize(new java.awt.Dimension(856, 179));
        JTA_CampoA.setMinimumSize(new java.awt.Dimension(856, 179));
        JTA_CampoA.setPreferredSize(new java.awt.Dimension(856, 179));
        jScrollPane2.setViewportView(JTA_CampoA);

        textAreaJP.add(jScrollPane2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 864.0;
        gridBagConstraints.weighty = 187.0;
        fundoJP.add(textAreaJP, gridBagConstraints);

        botoesJP.setName(""); // NOI18N
        botoesJP.setPreferredSize(new java.awt.Dimension(860, 50));
        botoesJP.setLayout(new java.awt.GridLayout());

        JB_Analisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/furb/linguagensformais/aplicacao/imagens/forward.png"))); // NOI18N
        JB_Analisar.setText("Analisar");
        JB_Analisar.setMaximumSize(new java.awt.Dimension(274, 46));
        JB_Analisar.setMinimumSize(new java.awt.Dimension(274, 46));
        JB_Analisar.setPreferredSize(new java.awt.Dimension(274, 46));
        JB_Analisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JB_AnalisarActionPerformed(evt);
            }
        });
        botoesJP.add(JB_Analisar);

        JB_Limpar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/furb/linguagensformais/aplicacao/imagens/editcut.png"))); // NOI18N
        JB_Limpar.setText("Limpar");
        JB_Limpar.setMaximumSize(new java.awt.Dimension(274, 46));
        JB_Limpar.setMinimumSize(new java.awt.Dimension(274, 46));
        JB_Limpar.setPreferredSize(new java.awt.Dimension(274, 46));
        JB_Limpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JB_LimparActionPerformed(evt);
            }
        });
        botoesJP.add(JB_Limpar);

        JB_Equipe.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/furb/linguagensformais/aplicacao/imagens/system-users.png"))); // NOI18N
        JB_Equipe.setText("Equipe");
        JB_Equipe.setMaximumSize(new java.awt.Dimension(274, 46));
        JB_Equipe.setMinimumSize(new java.awt.Dimension(274, 46));
        JB_Equipe.setPreferredSize(new java.awt.Dimension(274, 46));
        JB_Equipe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JB_EquipeActionPerformed(evt);
            }
        });
        botoesJP.add(JB_Equipe);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 864.0;
        gridBagConstraints.weighty = 5.0;
        fundoJP.add(botoesJP, gridBagConstraints);

        JSP_CampoB.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        JSP_CampoB.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        JSP_CampoB.setPreferredSize(new java.awt.Dimension(864, 173));

        JT_CampoB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Linha", "Resultado", "Sequência", "Reconhecimento"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        JT_CampoB.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        JT_CampoB.setAutoscrolls(false);
        JT_CampoB.setPreferredSize(new java.awt.Dimension(864, 173));
        JT_CampoB.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        JSP_CampoB.setViewportView(JT_CampoB);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 864.0;
        gridBagConstraints.weighty = 173.0;
        fundoJP.add(JSP_CampoB, gridBagConstraints);

        getContentPane().add(fundoJP);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void JB_EquipeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JB_EquipeActionPerformed
        JOptionPane.showMessageDialog(null, "Alunos: Flávio Omar Losada e\n"
            + "               Gabriel da Silva Bernardi");
    }//GEN-LAST:event_JB_EquipeActionPerformed

    private void JB_LimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JB_LimparActionPerformed
        this.limparCampoA();
        this.limparCampoB();
    }//GEN-LAST:event_JB_LimparActionPerformed

    private void JB_AnalisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JB_AnalisarActionPerformed
        this.analisar();
    }//GEN-LAST:event_JB_AnalisarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Errado".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Aplicacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Aplicacao().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JB_Analisar;
    private javax.swing.JButton JB_Equipe;
    private javax.swing.JButton JB_Limpar;
    private javax.swing.JScrollPane JSP_CampoB;
    private javax.swing.JTextArea JTA_CampoA;
    private javax.swing.JTable JT_CampoB;
    private javax.swing.JPanel botoesJP;
    private javax.swing.JPanel fundoJP;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel textAreaJP;
    // End of variables declaration//GEN-END:variables
    
    private void formatarTela(){
        this.setResizable(false);
        this.setLocationRelativeTo(null);
    }
    
    private void inicializarCampos(){
        this.JTA_CampoA.setBorder(new NumberedBorder());
        this.definirtamanhoColunaJTable();
        this.tableModel = (DefaultTableModel) this.JT_CampoB.getModel();
        this.limparTableModel = new String[4];
        this.limparCampoA();
        this.limparCampoB();
    }
    
    private void definirtamanhoColunaJTable() {
        this.JT_CampoB.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);  
        this.JT_CampoB.getColumnModel().getColumn(0).setPreferredWidth(50);  
        this.JT_CampoB.getColumnModel().getColumn(1).setPreferredWidth(150);  
        this.JT_CampoB.getColumnModel().getColumn(2).setPreferredWidth(250);  
        this.JT_CampoB.getColumnModel().getColumn(3).setPreferredWidth(406);  
    }
    
    private void limparCampoA(){
        this.JTA_CampoA.setText("");
    }
    
    private void limparCampoB(){
        this.tableModel.getDataVector().setSize(0);
        for (int linha = 0; linha < 8; linha++) {
            tableModel.addRow(this.limparTableModel);
        }
    }
    
    private void analisar() {
        this.lstPalavra = new ArrayList<>();
        this.limparCampoB();
        this.procurarPalavras();
        this.popularJTable();
    }
    
    public void procurarPalavras(){
        String texto = this.JTA_CampoA.getText();
        
        String[] linha = texto.split("\\n");
        for (int numeroLinha = 0; numeroLinha < linha.length; numeroLinha++) {
            String separarPalavras = linha[numeroLinha].replace(" ", "\n").replace("\t", "\n");
            String[] sequencias = separarPalavras.split("\\n");
            for (String sequencia : sequencias) {
                if (this.possuiSimboloEspecial(sequencia)) {
                    String[] sequenciasSimbolosEspeciais = this.separarSequenciaSimboloEspecial(sequencia);
                    for (String sequenciaSimboloEspeciai : sequenciasSimbolosEspeciais) {
                        if (!sequenciaSimboloEspeciai.isEmpty()){
                            this.lstPalavra.add(this.criarPalavra(sequenciaSimboloEspeciai, numeroLinha));
                        }
                    }
                } else if (!sequencia.equals("")) {
                    this.lstPalavra.add(this.criarPalavra(sequencia, numeroLinha));
                }
            }
        }
    }
    
    private Palavra criarPalavra(String sequencia, int numeroLinha){
        Palavra palavra = new Palavra();
        this.automato = new Automato();
        this.automato.q0(sequencia);
        
        palavra.setSequencia(sequencia);
        palavra.setLinha(numeroLinha + 1);
        palavra.setResultado(this.automato.getResultado());
        palavra.setReconhecimento(this.automato.getReconhecimento().toString());
        return palavra;
    }

    private boolean possuiSimboloEspecial(String palavra) {
        return palavra.contains(";") || palavra.contains(".") 
                || palavra.contains(",");
    }
    
    private String[] separarSequenciaSimboloEspecial(String sequencia){
        String[] caracteres = sequencia.split("");
        StringBuilder palavras = new StringBuilder();
        for (String caracter : caracteres) {
            if (caracter.equals(";") || caracter.equals(".") || caracter.equals(",")) {
                palavras.append("\n").append(caracter).append("\n");
            } else {
                palavras.append(caracter);
            }
        }
        return palavras.toString().split("\n");
    }
    
    private void popularJTable() {
        this.tableModel.getDataVector().setSize(0);
        
        int controleLinhasEmBranco = 0;
        for(Palavra p : this.lstPalavra){
            Object[] row = new Object[4];
            row[0] = p.getLinha();
            row[1] = p.getResultado();
            row[2] = p.getSequencia();
            row[3] = p.getReconhecimento();
            tableModel.addRow(row);
            controleLinhasEmBranco++;
        }
        for (; controleLinhasEmBranco < 8; controleLinhasEmBranco++) {
            tableModel.addRow(this.limparTableModel);
        }
    }
}