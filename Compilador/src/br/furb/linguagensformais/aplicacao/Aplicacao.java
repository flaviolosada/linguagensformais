/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.furb.linguagensformais.aplicacao;

import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author Fl√°vio e Carol
 */
public class Aplicacao extends javax.swing.JFrame {

    /**
     * Creates new form Aplicacao
     */
    public Aplicacao() {
        initComponents();
        this.JTA_Editor_Palavras.setBorder(new NumberedBorder());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        JTA_Editor_Palavras = new javax.swing.JTextArea();
        JB_Analisar = new javax.swing.JButton();
        JB_Limpar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        JTA_Editor_Palavras.setColumns(20);
        JTA_Editor_Palavras.setRows(5);
        jScrollPane1.setViewportView(JTA_Editor_Palavras);

        JB_Analisar.setText("Analisar");
        JB_Analisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JB_AnalisarActionPerformed(evt);
            }
        });

        JB_Limpar.setText("Limpar");
        JB_Limpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JB_LimparActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 844, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(JB_Analisar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JB_Limpar)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JB_Analisar)
                    .addComponent(JB_Limpar))
                .addContainerGap(193, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void JB_AnalisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JB_AnalisarActionPerformed
        this.analisar();
    }//GEN-LAST:event_JB_AnalisarActionPerformed

    private void JB_LimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JB_LimparActionPerformed
        this.JTA_Editor_Palavras.setText("");
    }//GEN-LAST:event_JB_LimparActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Aplicacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Aplicacao().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JB_Analisar;
    private javax.swing.JButton JB_Limpar;
    private javax.swing.JTextArea JTA_Editor_Palavras;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void analisar() {
        List<Palavra> lstPalavra = this.getPalavras(this.JTA_Editor_Palavras.getText());
    }
    
    public List<Palavra> getPalavras(String text){
        List<Palavra> lstPalavra = new ArrayList<>();
        
        String[] linha = text.split("\\n");
        for (int numeroLinha = 0; numeroLinha < linha.length; numeroLinha++) {
            String palavraFormatada = linha[numeroLinha].replace(" ", "\n").replace("\t", "\n");
            String[] sequencias = palavraFormatada.split("\\n");
            for (String sequencia : sequencias) {
                if (this.simboloEspecial(sequencia)) {
                    String[] simbolosPalavras = this.obterSimbolos(sequencia);
                    for (String simbolosPalavra : simbolosPalavras) {
                        lstPalavra.add(this.criarPalavra(simbolosPalavra, numeroLinha + 1));
                    }
                } else if (!sequencia.equals("")) {
                    lstPalavra.add(this.criarPalavra(sequencia, numeroLinha + 1));
                }
            }
            
        }
        return lstPalavra;
    }
    
    private Palavra criarPalavra(String sequencia, int numeroLinha){
        Palavra palavra = new Palavra();
        palavra.setSequencia(sequencia);
        palavra.setLinha(numeroLinha + 1);
        palavra.setResultado(this.palavraValida(palavra));
        return palavra;
    }
    
    private EnumValido palavraValida(Palavra palavra) {
        if(this.simboloEspecial(palavra.getSequencia())) {
            return EnumValido.SIMBOLO_ESPECIAL;
        } else if (this.testarPalavra()){
            
        }
        return null;
    }

    private boolean testarPalavra() {
        return false;
    }

    private boolean simboloEspecial(String palavra) {
        return palavra.contains(";") || palavra.contains(".") 
                || palavra.contains(",");
    }
    
    private String[] obterSimbolos(String sequencia){
        String[] separarCaracteres = sequencia.split("");
        StringBuilder palavras = new StringBuilder();
        for (String separarCaractere : separarCaracteres) {
            if (!separarCaractere.equals(";") && !separarCaractere.equals(".") && !separarCaractere.equals(",")) {
                palavras.append(separarCaractere);
            } else {
                palavras.append("\n").append(separarCaractere);
            }
        }
        return palavras.toString().split("\n");
    }
}